/*
File name: Project3
Created by: Mikayla Conforto
Created on: 3/20/2023
Synopsis: Creates stack class
*/
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstddef>
using namespace std;
const string SENTINEL = ";";
struct Node {
int data;
Node* link;
};
// precondition: c is initialized
// postcondition: returns true if c is '+', '-', '*' or '/'
bool isOperator(string c);
// precondition: o1 and o2 are initialized and op is an operator
// postcondition: returns op(o1, o2), e.g. if op is '-' then returns o1-o2
int calculate(int o1, int o2, char op);
// precondition: c is a digit
// postcondition: returns the integer value of c
int charToInt(char c);
class Stack {
public:
// default constructor
// initializes the stack to an empty stack
Stack();
// default destructor
// frees the memory used by dynamic node objects in the stack
~Stack();
// this is a const function, meaning it cannot change any of the member
//variables
// returns true if the stack is empty, false otherwise
bool isEmpty() const;
// this is a const function, meaning it cannot change any of the member
//variables
// returns the value at the top of stack, does not modify the stack,
does not
//check if the stack is empty or not
int top() const;
// adds data to the top of stack
void push(int data);
// removes the top value of stack, does not return it, does nothing if the
//stack is empty
void pop();
private:
Node* listHead; // pointer to the head of a linked list
};
int main() {
string in;
Stack operandStack;
size_t sent;
cout << "Enter a postfix expression (ending with " << SENTINEL << " and press
Enter):\n";
cin >> in;
while (in != SENTINEL) {
sent = in.find_first_of(SENTINEL); // validate that values
//&operand strings does not contain ending ";"
if (sent < in.length())
{
cout << "\nError, enter the ; character after a space " <<
endl;
exit(1);
}
if (isOperator(in)) {
// pop two numbers from stack
int n1, n2;
if (operandStack.isEmpty()) {
// print error message
cerr << "Error, empty.\n";
exit(1); // end the program
}
n2 = operandStack.top();
operandStack.pop();
if (operandStack.isEmpty()) {
// print error message
cerr << "Error, empty.\n";
exit(1);
}
n1 = operandStack.top();
operandStack.pop();
// push the calculation result to the top of operandStack
int clc = calculate(n1, n2, in[0]);
operandStack.push(clc);
}
else {
// push the number to the top of opernadStack
// (pay attention to the data type)
int num = stoi(in);
operandStack.push(num);
}
cin >> in;
}
// pop a number from the top of stack
int result;
result = operandStack.top();
operandStack.pop();
if (operandStack.isEmpty()) { // nothing left in the stack
cout << "\nThe result is: " << result << endl;
}
else {// if there are still numbers in the stack, print an error message
cerr << "Not enough operators entered!\n";
}
return 0;
}
Stack::Stack() {
listHead = nullptr;
}
Stack::~Stack() {
Node* ptr = listHead;
while (ptr != nullptr) {
Node* tmp = ptr;
ptr = ptr->link;
delete tmp;
}
}
bool Stack::isEmpty() const {
Node* ptr = listHead;
if (ptr == nullptr) {
return true;
}
return false;
}
int Stack::top() const {
if (isEmpty()) {
return 0;
}
else {
return listHead->data;
}
}
void Stack::pop() {
if (isEmpty()) {
return;
}
else {
Node* tmp = listHead;
listHead = listHead->link;
delete tmp;
}
}
void Stack::push(int data) {
Node* new1 = new Node;
new1->data = data;
new1->link = listHead;
listHead = new1;
}
int calculate(int o1, int o2, char op) {
if (op == '-') {
return o1 - o2;
}
if (op == '+') {
return o1 + o2;
}
if (op == 'x' || op == '*') {
return o1 * o2;
}
if (op == '/') {
if (o2 != 0) {
return o1 / o2;
}
else {
cerr << "Cannot divide by zero.\n";
}
}
if (op == '^') {
return pow(o1, o2);
}
if (op == '%') {
if (o2 != 0) {
return o1 % o2;
}
else {
cerr << "Cannot divide by zero.\n";
}
}
}
bool isOperator(string c) {
return c == "+" || c == "-" || c == "*" || c == "/";
}
int charToInt(char c) {
return (static_cast<int>(c) - static_cast<int>('0'));
}
