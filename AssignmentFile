
/*
File name: Project2
Created by: Mikayla Conforto
Created on:  03-01-2023
Synopsis: stores assignments with their respective information
*/
#include <string>
#include <iostream>
#include <vector>
#include <iomanip>
#include <fstream>
using namespace std;
class Assignment {
private:
	//Data members
	string assignmentName; //Name of assignment
	int dueDate; //Assignment's due date
	int priority; //Assignment's priority
	int duration; //How many hours assignment will take
public:
	
	Assignment();

	Assignment(const Assignment& anAssignment);
	
	Assignment(string aName, int aDate, int aPriority, int aDuration);
	
	~Assignment();
	
	friend ostream& operator<< (ostream& out, const Assignment& anAssignment);

	friend bool operator< (Assignment a, Assignment b);

	int getDuration() const {
		return duration;
	}
	int getPriority() const {
		return priority;
	}
	int getDueDate() const {
		return dueDate;
	}
	string getName() const {
		return assignmentName;
	}
};
struct Node {
	string name;
	Assignment data;
	Node* link = nullptr;
	
};

void addAssignments(vector<Assignment>& assignments);

void displayAssignments(Node* listHead);

void deleteAssignment(vector<Assignment>& assignments);

Node* createLinkedList(vector<Assignment>& assignments);

vector<Assignment> loadAssignments(string fileName);

void saveAssignments(vector<Assignment>& assignments, string fileName);
int main() {
	char userSelection; //Gets the user choice
	vector<Assignment> assignments; //Vector of assignments
	cout << "Welcome to the assignment manager. Your options are " << endl;
	cout << "1: Add new assignment." << endl;
	cout << "2: View current assignments." << endl;
	cout << "3: Delete an assignment." << endl;
	cout << "4: Load your list of assignments." << endl;
	cout << "5: Save your list of assignments." << endl;
	cout << "Enter the number of the option you wish to select. If you want to exit, type Q / q" << endl;
		cin >> userSelection;
	while (userSelection != 'q' && userSelection != 'Q') {
		//Evaluate user selection and activate corresponding selection
		if (userSelection == '1') {
			addAssignments(assignments);
		}
		else if (userSelection == '2') {
			if (assignments.size() > 0) {
				Node* listHead = createLinkedList(assignments);
				displayAssignments(listHead);
				//Delete listHead afterwards
				delete listHead;
			}
			else {
				cout << endl << "There are no current assignments" << endl;
			}
		}
		else if (userSelection == '3') {
			deleteAssignment(assignments);
		}
		else if (userSelection == '4') {
			cout << "Please enter file name with assignments." << endl;
			string fileName;
			cin >> fileName;
			ifstream fileIn;
			fileIn.open(fileName);
			assignments = loadAssignments(fileName);
		}
		else if (userSelection == '5') {
			cout << "Please enter file name to save the assignments." <<
				endl;
			string fileName;
			cin >> fileName;
			saveAssignments(assignments, fileName);
		}
		else {
			cout << "Error! Invalid input." << endl;
		}
		//Re-query user choice
		cout << endl;
		cout << "Welcome to the assignment manager. Your options are " << endl;
		cout << "1: Add new assignment." << endl;
		cout << "2: View current assignments." << endl;
		cout << "3: Delete an assignment." << endl;
		cout << "4: Load your list of assignments." << endl;
		cout << "5: Save your list of assignments." << endl;
		cout << "Enter the number of the option you wish to select. If you want to exit, type Q / q" << endl;
			cin >> userSelection;
	}
	return 0;
}

Assignment::Assignment() {
	assignmentName = "";
	duration = 0;
	priority = 1;
	dueDate = 0;
}
Assignment::Assignment(const Assignment& anAssignment) {
	assignmentName = anAssignment.assignmentName;
	duration = anAssignment.duration;
	priority = anAssignment.priority;
	dueDate = anAssignment.dueDate;
}
void addAssignments(vector<Assignment>& assignments) {
	string name;
	int date, priority, time;
	char c;
	cout << "Enter week assignments" << endl;
	
	bool cont = true;
	while (cont) {
		cout << "Type N/n for New or E/e to End: ";
		cin >> c;
		if (c == 'N' || c == 'n') {
			cout << "Enter assignment name: ";
			cin >> name;
			cout << "Enter due date (day): ";
			cin >> date;
			cout << "Enter Priority (L:1,M:2, H:3): ";
			cin >> priority;
			while (priority != 1 && priority != 2 && priority != 3) {
				cout << "Error!, priority must be 1, 2, or 3" << endl;
				cout << "Enter priority: ";
				cin >> priority;
			}
			cout << "Estimate time required (hours): ";
			cin >> time;
			while (time < 0) {
				cout << "Error!, time must be > 0" << endl;
				cout << "Enter time required (hours): ";
				cin >> time;
			}
			Assignment newAssignment(name, date, priority, time);
			assignments.push_back(newAssignment);
			if (assignments.size() > 0) {
				cout << "Saved successfully!" << endl;
			}
			cout << endl;

			
		}
		else if (c != 'E' && c != 'e') {
			cout << "Invalid input" << endl;

		}
		else {
			cout << endl;
			cont = false;
			return;
		}
	}
}
void outputAssignments(vector<Assignment>& assignments) { 
	cout << "List of Assignments:" << endl;
	for (Assignment assignment : assignments) {
		cout << assignment << endl;
	}
}
void deleteAssignment(vector<Assignment>& assignments) {
	char userInput; // User input that determines whether or not the user wants 

	if (assignments.empty()) { //checks if there are no assignments
		cout << "There are no current assignments to delete." << endl << endl;
		return;
	}
	cout << left;
	cout << setw(5) << '#';
	cout << setw(16) << "Name" << endl;

	for (int i = 0; i < assignments.size(); i++) { //outputs the assignment number and name
		cout << left;
		cout << setw(5) << i + 1 << setw(16) << assignments[i].getName() << endl;
	}
	int num;
	bool cont = true;
		while (cont) {
			cout << "Type D/d to Delete assignment or M/m to return to Main menu: ";
			cin >> userInput;
			if (userInput == 'M' || userInput == 'm') {
				return;
			}
			if (userInput == 'd' || userInput == 'D') {
				cout << "Enter assignment number to delete: ";
				cin >> num;
				for (int i = 0; i < assignments.size(); i++) {
					if (num == i + 1) { 
						assignments.erase(assignments.begin() + i);
						cout << "Assignment deleted successfully!" << endl;
						break;
					}

				}


			}
			else {
				cout << "Invalid input" << endl;
			}
		}
}




void displayAssignments(Node* listHead) {
	//Output header line
	cout << left;
	cout << setw(16) << "Name";
	cout << setw(10) << "Due Date";
	cout << setw(10) << "Priority";
	cout << setw(10) << "Estimate hours" << endl;
	//Write your code here
	Node* current = listHead->link;
	while (current != NULL) {
		cout << left << setw(16) << current->data.getName() << setw(10) << current->data.getDueDate() << setw(10) << current->data.getPriority() << setw(10) << current->data.getDuration() << endl;
		current = current->link;
	}
}
vector<Assignment> loadAssignments(string fileName) {
	vector<Assignment> list;
	ifstream file(fileName);
	if (file.is_open()) {
		string line;
		string assignmentName;
		int dueDate = 0;
		int priority = 0;
		int duration = 0;
		while (getline(file, line)) {
			if (line.find("<Name>") != string::npos) { 
				//looks for the file format headers (like <DueDate>, <Priority>, etc, and take from index + (num char) with length 
				// of the second parameter

				//stoi has to be used because due date, priority, and duration are read as strings but they need to be converted to type int
				
				assignmentName = line.substr(line.find("<Name>") + 6, line.find("</Name>") - line.find("<Name>") - 6);
			}
			else if (line.find("<DueDate>") != string::npos) {
				dueDate = stoi(line.substr(line.find("<DueDate>") + 9, line.find("</DueDate>") - line.find("<DueDate>") - 9));
			}
			else if (line.find("<Priority>") != string::npos) {
				priority = stoi(line.substr(line.find("<Priority>") + 10, line.find("</Priority>") - line.find("<Priority>") - 10));
			}
			else if (line.find("<Duration>") != string::npos) {
				duration = stoi(line.substr(line.find("<Duration>") + 10, line.find("</Duration>") - line.find("<Duration>") - 10));
				Assignment a(assignmentName, dueDate, priority, duration);
				list.push_back(a);
			}
		}
		cout << endl << "File successfully loaded." << endl;
		file.close();
	}
	return list;
}


void saveAssignments(vector<Assignment>& assignments, string fileName) {
	fstream txtFile;
	txtFile.open(fileName, ios::out);
	if (!txtFile.is_open()) {
		cerr << "Unable to open file " << fileName << endl;
		exit(10);
	}
	else {
		for (int i = 0; i < assignments.size(); i++)
			txtFile << assignments[i] << endl;

		txtFile.close();
	}

}

Node* createLinkedList(vector<Assignment>& assignments) {
	if (assignments.empty()) {
		return nullptr;
	}

	Node* head = new Node;
	head->data = assignments[0];
	head->link = nullptr;

	Node* current = head;

	for (int i = 0; i < assignments.size(); i++) {
		Node* newNode = new Node;
		newNode->data = assignments[i];
		newNode->link = nullptr;
		current->link = newNode;
		current = newNode;
	}

	return head;
}

Assignment::Assignment(string aName, int aDate, int aPriority, int aDuration) {
	assignmentName = aName;
	dueDate = aDate;
	priority = aPriority;
	duration = aDuration;
}

Assignment::~Assignment() {
	//delete
}

ostream& operator<< (ostream& out, const Assignment& anAssignment) {
	out << "<Assignment>" << endl;
	out << "<Name>" << anAssignment.assignmentName << "</Name>" << endl;
	out << "<DueDate>" << anAssignment.dueDate << "</DueDate>" << endl;
	out << "<Priority>" << anAssignment.priority << "</Priority>" << endl;
	out << "<Duration>" << anAssignment.duration << "</Duration>" << endl;
	return out;
}

bool operator< (Assignment a, Assignment b) {
    if ((a.priority < b.priority)
		|| ((a.priority == b.priority) && (a.dueDate > b.dueDate))) {
		return true; 
	}
	return false;
}
