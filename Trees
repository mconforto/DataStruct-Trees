/*
File name: Trees
Created by: Mikayla Conforto
Created on: 3-27-2023
*/
#include <iostream>
#include <cstddef>
#include <cassert>
using namespace std;
struct TreeNode {
	int data;
	TreeNode* left;
	TreeNode* right;
};
// Function declarations
int size(TreeNode* root);
int count(TreeNode* root, int target);
int height(TreeNode* root);
bool isSameTree(TreeNode* root1, TreeNode* root2);
bool hasPathSum(TreeNode* root, int target);

TreeNode * insertNodes(int nodeValues[], TreeNode * root, int i, int n);

void freeNodes(TreeNode* root);
int main() {
	
	TreeNode* root1 = NULL, * root2 = NULL;
	int nodedatas[] = { 1,2,3,4,5,6,7,8,1,-1,-1,-1,-1,-1,1 };
	int nodedatas2[] = { 1,2,3,4,5,-1,7,8,1,-1,-1,-1,-1,1,-1 };
	root1 = insertNodes(nodedatas, root1, 0, 15);
	root2 = insertNodes(nodedatas2, root2, 0, 15);
	assert(size(root1) == 10);
	assert(size(root1->left) == 5);
	assert(count(root1, 1) == 3);
	assert(count(root1, 9) == 0);
	assert(height(root1) == 3);
	assert(height(root1->left->right) == 0);
	assert(hasPathSum(root1, 10) == true);
	assert(hasPathSum(root1, 1) == false);
	assert(isSameTree(root1, root2) == false);
	assert(isSameTree(root1->left, root2->left) == true);
	cout << "Congratulations, all tests passed!" << endl;
	freeNodes(root1);
	freeNodes(root2);
	return 0;
}

TreeNode* insertNodes(int nodeValues[], TreeNode* root, int i, int n) {
	if (i < n && nodeValues[i] != -1) {
		root = new TreeNode;
		root->data = nodeValues[i];
		root->left = insertNodes(nodeValues, root->left, 2 * i + 1, n);
		root->right = insertNodes(nodeValues, root->right, 2 * i + 2, n);
	}
	else {
		root = NULL;
	}
	return root;
}
void freeNodes(TreeNode* root) {
	if (root != NULL) {
		freeNodes(root->left);
		freeNodes(root->right);
		delete root;
	}
}
int size(TreeNode* root) {
	if (root == NULL) {
		return 0;
	}
	else {
		int leftSize = size(root->left);
		int rightSize = size(root->right);
		return leftSize + rightSize + 1; //adds left and right +1 to include root
	}

}
int count(TreeNode* root, int target) {
	if (root == NULL) {
		return 0;
	}
	int numOcc = count(root->left, target) + count(root->right, target);
	if (root->data == target) {
		numOcc++;
	}
	return numOcc;
}
int height(TreeNode* root) {
	if (root == NULL) {
		return -1;
	}

	int rightSize = height(root->right);
	int leftSize = height(root->left);

	if (rightSize > leftSize) {
		return rightSize + 1;
	}
	else {
		return leftSize + 1;
	}

}
bool isSameTree(TreeNode* root1, TreeNode* root2) {
	if (root1 == NULL && root2 == NULL) {
		return true; //the trees are the same if there is no tree?
	}
	if (root1 == NULL || root2 == NULL) {
		return false; //checks if either are null
	}
	if (root1->data != root2->data) {
		return false; //checks roots
	}
	bool sameLeft = isSameTree(root1->left, root2->left);
	bool sameRight = isSameTree(root1->right, root2->right);
	return sameLeft && sameRight;

}
bool hasPathSum(TreeNode* root, int target) {
	if (root == NULL) {
		return (target == 0); //sum 0
	}
	else if (root->left == NULL && root->right == NULL) {
		return (root->data == target);
	}
	else {
		int remainingSum = target - root->data;
		return (hasPathSum(root->left, remainingSum) || hasPathSum(root->right, remainingSum));
	}
}
